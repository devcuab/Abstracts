	Разработка МП - это динамичная и высокоспециализированная дисциплина прогрманой инженерии, которая занимается проектированием, созданием и поддержкой приложений для мобильных ус-в
	
	Классификация нативных подход:
	Выбор платформы
	Android: Kotlin (toolkit'a jetpack Compose)(Android Studio)
	iOS: Swift (SwiftUI)
	Кроссплатформенный: Flutter, Dart
	
	Мобильные разработчики:
	1)Разрабатывают архитектуру приложения.
	2)Создают интерфейс.
	3)тестируют интерфейс и сам проект
	4)выкладывают готовое приложение в AppStore и Google Play Market
	5)Устраняют уязвимости
	6)выпукают обновления.

	Android:
	Открытая платформа, Многообразие устройств. Google Play:  менее строгие: больше свободы, меньше качества
	Языки програмирования:Java, Kotlin
	
	iOS:
	Закрытая платформа:строгий контроль, больше качества. Ограниченное число устройств. AppStore: более строгая модерация
	Языки програмирования:Swift, Objective

	Нативные приложения:
	Конкретные платформы с использованием их преимуществ
	Высокопроизводительность. полный доступ и взаимодействие (камера геолокация и т.д.

	Веб. приложения:
	Запускаются в веб браузере устройства. Могут быть доступны через интернет и не требуют установки. Html, CSS, Java Script

	Кроссплатформенность:
	Обновление централизовано, простые приложения

 	Swift:Instagramm, Uber, Airbnb, Linkedln, Facebook, Apple music, Apple maps, Stocks, Health, Lyft
	Objective: Spotify, Pinterest

	b) для Android и экосистемы Google
	Kotlin (Основной язык с 2019)
Для него был нужен современнный безопасный язык. На нём написаны: Pinterest, Trello, Netflix, Airbnb, Uber, Evernote, Slack, Coursena, Google apps
	Java
	Огромное количество legacy-кода и библеотек, написанный на Java. Его до сех пор нужно знать для поддержки и обновления старых приложений

2) Кроссплатформенность разработка (One Codebase for All)
Dart + Flutter ( Современный лидер от Google)
	Для чего он нужен:Dart - это язык, а Flutter - фреймворк на его основе. Flutter не использует нативные компоненты, а рисует интерфейс сам, что обеспечивает одинаковый внешний вид и высокую производительность на iOS и Andriod
	что на нём создано?: Google pay, Alibaba, BMW, my BMW app, eBAY, mototrs, nubank, wechat

JAVA SCript/TypeScript + React NAtive
	для чего он нужен: позволяет веб-разработчикам использовать их знания (Java Script) для создания мобильных приложений. React Native оборачивает код в нативные компоненты, что даёт приложению более "нативный" вид и ощущения.
	что создано на нём: FaceBook Instagram
	Discord, Skype, Bloomberg
	Shopify


2. Кросс-платформенная разработка (One Codebase for All) 
	С# + .NET MAUI (От Microsoft)
		для чего он нужен: Позволяет разработчикам C# создавать
 		кроссплатформенные прилодения. Сильно интегрирован с 				экосистемой Micerosoft (Azure, Visual Studio).
Что такое фреймворк?
	Фреймворк (Framework) - это каркас иои основа для создания программного 	обеспечения. Если представить, что разработчик приложения - это строительство 	дома, то:
		*Язык програмирования (Kotlin, Swift, SwiftUI) - это готовые фундамент, несущие стены, перекрытия и даже проектная документация. Вы строите дом

	Фреймворки для мобильной разработки (2025г.) (Их можно разделить на две большие категории)
	1. Нативные фреймворки ( для конкретной ОС)
Эти феймворки созданы компаниями владельцами операционных систем 
	a) Для iOS:
	SwiftUI: (основной в 2025г) Высокая произв. интеграц. с ОС. Единый код
	UIKit: Более старый и исперативный фреймворк. Вы описываете последовательность действий для создания интерфейса

	
	Фреймворки для мобильной разработки(2025г)
	 
	b)Для Android:
	Jetpack Compose (Основной в 2025г)
	Описание: Современный декларативный язык от Google, прямой аналог SwiftUI для мира Anroid. Язык:Kotlin. Плюсы: Меньше кода, высокая читаемость, отличная поддержка, горячая перезагрузка.
	Android Views (legacy, но ещё используется)
	Описание: Классический подход с использованием XML-разметки для экранов и Java/Kotlin кода для логики. Включает в Widgets (кнопки, текст. поля и т.д.) Язык: kotlin/java. Плюсы: Стандарт для многих старых проектов, детальный контроль
	
	2.Кросс-платформенные фреймворки(единый код для iOS и Android)
	эти фреймворки позволяют писать код один раз, а затем компилировать его под обе (и более) операц. системы. Это жертва небольшой долей производительности и нативной "идентичности" ради скорости разработки и снижения затрат

	Flutter (лидер направления)
	Описание: Фреймворк от Google,который использует собственный движок для отрисовки интерфейса. Не использует нативные компоненты, а рисует всё сам. Язык: Dart. Плюсы: Высочайшая производительность (близкая к нативной), богатейшие возможности кастомизации интерфейса, горячая перезарузка единый код для моб. веб и десктоп


	Фреймворки для мобильной разработки (2025г.)

	React Native (Мощный конкурент)
	Описание: Фреймворк от Meta (Facebook). В отличие от Flutter. Он использует нативные компоненты ОС. Вы пишите логику на JavaScript/TypeScript, а фреймворк "превращает" ее в нативные views (UIKit на iOS и Android Views на Android). Язык: JavaScript/TypeScript. Плюсы Модно использовать веб-технологии, огромное сообщество множество библиотек, плавная анимация (так как использует нативные компоненты).

	Kotlin Multiplatform mobile (KMM) -  "Гибридный" подход
	Описание: Технология от JetBrains. Позволяет писать общую бизнес-логику на Kotlin один раз и использовать её на обеих платформах. UI при этом содаёт нативно на SwiftUI/Jetpack Compose. Язык:Kotlin. Плюсы:Максимальная производительность и нативный UX при экономии на написании общец логики. Идеален для больший проектов с общей кодовой базой
	
	Что должны знаиь програмисты в мобильной разработке
	Чтобы сделать хороший проект для самртфона или планшета, независимо от операц системы, под упралвением которой работает устройство, каждый програмист должен познакомиться с некоторыми инструментами. Они будут полезны и разработке декстопных проектов.
	
	Программистам необходимо умерт работать с Git - распределённой системой контроля версий, а также github. Не лишним будет изучить фреймворки и библеотки выбранного языка, разобраться принципам передачи данных через HTTP и REST, а также научиться работать с базами данных.

	Создание интерфейсов приложений на основе макетов тоже пригодиться. Разработчик ку предстоит выяснить, как создавать запросы и обрабатывать данные, рассмотреть JSON-формат и обучаться азам применения протоколов, подключенния без данных к приложениям, освоить архетектурные подходы и методы хранения данных

	
	Что должны знать программисты в мобильной разработки 
	Далее все зависит от того, для какой ОС пишеться проект. В случае с Android предстоит знать:
		*XML.
		*Android SDK.
		*Java / Kotlin
		*Основы ООП
		*Файловую структуру и принципы работы андроида
	
		
	Обзор сервисов и приложений для создания мобильных приложений
	Android разработчик скорее всего использует Android Studio, а специалисты, которые разрабаьывают приложения для Apple, выберут XCode. Альернативные редакторы есть, но их используют только на больших проектах, для начинающего специалистаточно хватит стандартных приложений

	Для IOS. Компания Apple предлагает разработчикам интегрированную среду XCode, она предоставляет инструменты для создания приложений, их дизайна и публикаций на I платформах.  XCode поддерживает исходный код языков програмирования Sfidt и Objective-С. Среда разработки позволяет спроектировать пользовательский интерфес, написать код для прилодения, скомпилировать его протестировать и провериь ошибки

	Для Android. Мобильные приложения под Android создают Android Studio. Она позволяет разрабатывать приложения для смартфонов, планшетов, часов, телевизоров и др на этой ОС. Модно выбрать расположение проета, язык - Java или Kotlin, минимальную поддерживаемую SDK - самую ранюю версию операционной системы Android, в которой приложение может работать. В Android Studio заложен концепт непрерывной интеграции, поэтому программа постоянно проверяет код и обнаруживет имеющиеся проблемы. Это экономит время и позволяет быстрее опубликовать версию моб. верс приложения

	Процесс разработки мобильног оприложения
	Идея и планирования
	Первый шаг мабильного приложения - это фр=ормирование идеи и планирование
	Планировние включает в себя анализ рынка и конкурентов, определения бизнес-можели и создание дорожной карты проекта, выйжно учитывать тех. ограничения и возможности а также время и бюджет

	Дизайн
	ДИзайн моб приложения включает пользовательский UI и пользовательский опыт UX . Важно создать интуитивно понятный и привлекательный интерфейс, инструменты: Sketch, Figma и adpbe XD
	определить структуру и дизайн

	Разработка

		