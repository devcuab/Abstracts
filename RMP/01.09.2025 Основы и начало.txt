	Разработка МП - это динамичная и высокоспециализированная дисциплина прогрманой инженерии, которая занимается проектированием, созданием и поддержкой приложений для мобильных ус-в
	
	Классификация нативных подход:
	Выбор платформы
	Android: Kotlin (toolkit'a jetpack Compose)(Android Studio)
	iOS: Swift (SwiftUI)
	Кроссплатформенный: Flutter, Dart
	
	Мобильные разработчики:
	1)Разрабатывают архитектуру приложения.
	2)Создают интерфейс.
	3)тестируют интерфейс и сам проект
	4)выкладывают готовое приложение в AppStore и Google Play Market
	5)Устраняют уязвимости
	6)выпукают обновления.

	Android:
	Открытая платформа, Многообразие устройств. Google Play:  менее строгие: больше свободы, меньше качества
	Языки програмирования:Java, Kotlin
	
	iOS:
	Закрытая платформа:строгий контроль, больше качества. Ограниченное число устройств. AppStore: более строгая модерация
	Языки програмирования:Swift, Objective

	Нативные приложения:
	Конкретные платформы с использованием их преимуществ
	Высокопроизводительность. полный доступ и взаимодействие (камера геолокация и т.д.

	Веб. приложения:
	Запускаются в веб браузере устройства. Могут быть доступны через интернет и не требуют установки. Html, CSS, Java Script

	Кроссплатформенность:
	Обновление централизовано, простые приложения

 	Swift:Instagramm, Uber, Airbnb, Linkedln, Facebook, Apple music, Apple maps, Stocks, Health, Lyft
	Objective: Spotify, Pinterest

	b) для Android и экосистемы Google
	Kotlin (Основной язык с 2019)
Для него был нужен современнный безопасный язык. На нём написаны: Pinterest, Trello, Netflix, Airbnb, Uber, Evernote, Slack, Coursena, Google apps
	Java
	Огромное количество legacy-кода и библеотек, написанный на Java. Его до сех пор нужно знать для поддержки и обновления старых приложений

2) Кроссплатформенность разработка (One Codebase for All)
Dart + Flutter ( Современный лидер от Google)
	Для чего он нужен:Dart - это язык, а Flutter - фреймворк на его основе. Flutter не использует нативные компоненты, а рисует интерфейс сам, что обеспечивает одинаковый внешний вид и высокую производительность на iOS и Andriod
	что на нём создано?: Google pay, Alibaba, BMW, my BMW app, eBAY, mototrs, nubank, wechat

JAVA SCript/TypeScript + React NAtive
	для чего он нужен: позволяет веб-разработчикам использовать их знания (Java Script) для создания мобильных приложений. React Native оборачивает код в нативные компоненты, что даёт приложению более "нативный" вид и ощущения.
	что создано на нём: FaceBook Instagram
	Discord, Skype, Bloomberg
	Shopify


2. Кросс-платформенная разработка (One Codebase for All) 
	С# + .NET MAUI (От Microsoft)
		для чего он нужен: Позволяет разработчикам C# создавать
 		кроссплатформенные прилодения. Сильно интегрирован с 				экосистемой Micerosoft (Azure, Visual Studio).
Что такое фреймворк?
	Фреймворк (Framework) - это каркас иои основа для создания программного 	обеспечения. Если представить, что разработчик приложения - это строительство 	дома, то:
		*Язык програмирования (Kotlin, Swift, SwiftUI) - это готовые фундамент, несущие стены, перекрытия и даже проектная документация. Вы строите дом

	Фреймворки для мобильной разработки (2025г.) (Их можно разделить на две большие категории)
	1. Нативные фреймворки ( для конкретной ОС)
Эти феймворки созданы компаниями владельцами операционных систем 
	a) Для iOS:
	SwiftUI: (основной в 2025г) Высокая произв. интеграц. с ОС. Единый код
	UIKit: Более старый и исперативный фреймворк. Вы описываете последовательность действий для создания интерфейса
	


		